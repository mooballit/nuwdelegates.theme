var grid, loader, $addmemberdialog, available_columns = {}, active_columns = [], actions_column, status_column, editable_column, enabled_columns = [];
/* Vocabularies for select editors (Should these be generated by view code?) */
var gender_values = [ 'Male', 'Female', 'Unknown' ];
var state_values = [ 'ACT', 'NSW', 'NT', 'QLD', 'SA', 'TAS', 'VIC', 'WA', 'JBT' ];
var status_values = ['Potential Member', 'Paying', 'Resigned', 'Rule59 Resigned', 'Non-Union', 'Stopped Paying', 'Purged', 'Reduntant', 'On Books Not Working', 'Retired', 'Leave without Pay', 'Awaiting 1st payment', 'Requested Resignation', 'Parental Leave'];
var language_values = ['',
              'South Slavic',
              'Spanish',
              'Swedish',
              'Swahili',
              'Tagalog (Filipino)',
              'Tai',
              'Tajik',
              'Tamil',
              'Tatar',
              'Telugu',
              'Teochew',
              'Tetum',
              'Thai',
              'Tho',
              'Tigrinya',
              'Timorese',
              'Tiwi',
              'Tok Pisin',
              'Tongan',
              'Torres Strait Creole (Broken)',
              'Tulu',
              'Turkish',
              'Tuvaluan',
              'Ukrainian',
              'Urdu',
              'Vietnamese',
              'Walmajarri (Walmadjari)',
              'Warumungu (Warumunga)',
              'Welsh',
              'West Slavic',
              'Wik-Mungkan',
              'Wu',
              'Yankunytjatjara',
              'Yanyuwa (Anula)',
              'Yao',
              'Yiddish',
              'Yindjibarndi',
              'Yoruba',
              'Yulparija',
              'Zulu',
              'Acholi',
              'Adnymathanha (Yura Ngawarla)',
              'Afrikaans',
              'Ainu',
              'Akan',
              'Albanian',
              'Alyawarr (Alyawarra)',
              'Amharic',
              'Anindilyakwa',
              'Anmatyerr (Anmatyirra)',
              'Arabana (Arabuna)',
              'Arabic',
              'Aramaic',
              'Aromunian (Macedo-Romanian)',
              'Arrernte (Aranda)',
              'Asante',
              'Assamese',
              'Assyrian',
              'Auslan',
              'Azeri',
              'Balinese',
              'Balochi',
              'Balti',
              'Baltic',
              'Bardi',
              'Basque',
              'Belorussian',
              'Bemba',
              'Bengali',
              'Bhotia',
              'Bikol',
              'Bisaya',
              'Bislama',
              'Bosnian',
              'Brahui',
              'Breton',
              'Bulgarian',
              'Bunuba (Bunaba)',
              'Burarra',
              'Burmese',
              'Burushaski',
              'Buyi',
              'Cantonese',
              'Catalan',
              'Cebuano',
              'Celtic',
              'Chang Chow',
              'Chinese',
              'Cornish',
              'Crioulo',
              'Croatian',
              'Czech',
              "Dhay'yi",
              'Dhaangu',
              'Dhuwal-Dhuwala',
              'Djinang',
              'East Slavic',
              'Estonian',
              'Faeroese',
              'Fijian',
              'Finnic',
              'Finnish',
              'French',
              'Frisian',
              'Friulian',
              'Gaelic (Scotland)',
              'Galician',
              'Georgian',
              'German',
              'Gilbertese',
              'Greek',
              'Gugu Yalanji',
              'Gujarati',
              'Guugu Yimidhirr',
              'Hakka',
              'Hawaiian',
              'Hebrew',
              'Hindi',
              'Hmon',
              'Hmong-Mien',
              'Hokkien',
              'Hunan',
              'Hungarian',
              'Iberian Romance',
              'Icelandic',
              'Indonesian',
              'Iranic',
              'Irish',
              'Italian',
              'Japanese',
              'Jaru (Djaru)',
              'Jui',
              'Kalaw Lagaw Ya (Kalaw Kawa Ya)',
              'Kan',
              'Kannada',
              'Karelian',
              'Karrwa (Garrwa, Garawa)',
              'Kashmiri',
              'Khasi',
              'Khmer',
              'Khmu',
              'Kija (Gidya)',
              'Konkani',
              'Korean',
              'Kukatha (Kokatha, Gugada)',
              'Kukatja (Gugaja)',
              'Kunwinjku (Gunwinggu)',
              'Kurdish',
              "Kuuku-Ya'u",
              'Kuurinji (Gurindji)',
              'Ladino',
              'Lao',
              'Lapp',
              'Latin',
              'Latvian',
              'Lebanese',
              'Letzeburgish',
              'Lisu',
              'Lithuanian',
              'Ludic',
              'Macedonian',
              'Makaton',
              'Malagasy',
              'Malay',
              'Malayalam',
              'Maltese',
              'Mandarin',
              'Manx',
              'Maori (Cook Island)',
              'Maori (New Zealand)',
              'Marathi',
              'Mauritian Creole',
              'Meryam Mir',
              'Mien',
              'Miriwoong',
              'Mon-Khmer',
              'Motu',
              'Muong',
              'Murrinh-Patha',
              'Mutpurra (Mudburra)',
              'Nauruan',
              'Nepali',
              'Netherlandic',
              'Ngaatjatjara',
              'Ngangkikurungurr',
              'Ngarluma',
              'Niue',
              'Norwegian',
              'Nunggubuyu',
              'Nyangumarta',
              'Nyungar (Noongar)',
              'Oromo',
              'Ossetic',
              'Papuan',
              'Pashto',
              'Persian',
              'Pho',
              'Pintupi',
              'Pitcairnese, Solomon Islands Pidgin (Pijin)',
              'Pitjantjatjara',
              'Polish',
              'Portuguese',
              'Punjabi',
              'Rajasthani',
              'Rawang',
              'Rembarrnga',
              'Riff',
              'Ritharrngu',
              'Romanian',
              'Romansch',
              'Romany',
              'Samoan',
              'Scandinavian',
              'Serbian',
              'Shluh',
              'Shona',
              'Sindhi',
              'Sinhalese',
              'Slovak',
              'Slovene',
              'Somali'
             ];

function requiredFieldValidator(value) {
    if (value == null || value == undefined || !value.length) {
        return {valid: false, msg: "This is a required field"};
    } else {
        return {valid: true, msg: null};
    }
}

function setColumns(cols)
{
    var active_cols = [
        actions_column,
    ];
    if (screen.width <= 1024) {
        active_cols.push(editable_column);
    }
    active_cols.push(status_column);

    grid.setColumns(active_cols.concat(cols));
}

/* API Functions */
function loadColumns() {
    jQuery.ajax( {
        url: 'portal_memberslistapi/get_columns',
        dataType: 'json',
        success: function ( data ) {
            active_columns = [];

            if (data.column_config) {
                for (key in data.column_config) {
                    var col = key.split('-');
                    var coltype = col[1], colid = col[0];
                    if(coltype = 'type'){
                        var type = data.column_config[colid+'-type'];
                        if (type == 'text') {
                            available_columns[colid].editor = Slick.Editors.Text;
                        }
                        if (type == 'select') {
                            available_columns[colid].editor = NUW.Editors.SelectEditor;
                            var selection = data.column_config[colid+'-selection'];
                            if (selection && selection.split('|').length > 1) {
                                available_columns[colid].selectValues = selection.split('|');
                            }
                        }
                        if (type == 'note') {
                            available_columns[colid].editor = Slick.Editors.LongText;
                        }
                    }
                }
            }
            // Update all custom names first
            for (colid in data.custom_names) {
                custom_name = data.custom_names[colid];
                available_columns[colid].name = custom_name;
            }

            /* Set active columns */
            for (ci in data.columns)
            {
                colname = data.columns[ci];

                active_columns.push(available_columns[colname]);
            }

            var $filter = $('#searchType');
            $filter.empty();
            $filter.append($('<option></option').attr("value", "name").text("Name"));
            $filter.append($('<option></option').attr("value", "webstatus").text("Status"));
            $.each(active_columns, function(idx, col) {
                if(col.id != 'name') {
                    $filter.append($('<option></option').attr("value", col.id).text(col.name));
                }
            });

            setColumns(active_columns);
        }
    } );
}

function saveColumns() {
    var cols = [], custnames = {};

    for ( ci in active_columns )
    {
        col = active_columns[ ci ];

        cols.push( col.id );

        if ( /custom[0-9]+/i.exec( col.id ) )
        {
            custnames[ col.id ] = col.name;
        }
    }

    jQuery.ajax( {
        url: 'portal_memberslistapi/set_columns',
        type: 'POST',
        dataType: 'json',
        data: {
            columns: cols,
            custom_names: custnames
        },
        success: function ( data ) {
        }
    } );
}

function editCommandHandler( item, column, editCommand )
{
    // Apply the change
    editCommand.execute();

    // Set row to "Saving" mode
    $( grid.getCellNode( editCommand.row, 0 ) ).html( '<img src="/++theme++nuwdelegates.theme/images/small-ajax-load.gif" />' );

    // Filter out null values and the index field
    var data = {};
    for ( key in item )
    {
        if ( key != 'index' && item[ key ] !== null )
        {
            data[ key ] = item[ key ];
        }
    }

    // Post it to the API
    $.ajax( {
        url: 'portal_memberslistapi/update_member',
        type: 'POST',
        dataType: 'json',
        data: data,
        success: function ( data ) {
            // On fail: undo
            if ( data.status != 'ok' )
            {
                editCommand.undo();
                /* Mark the row as having failed to save somehow */
                $( grid.getCellNode( editCommand.row, 0 ) ).html( '!!!' );
            }
            else
                $( grid.getCellNode( editCommand.row, 0 ) ).html( '' );
        }
    } );
}

function addressFormatter( row, cell, value, column, data )
{
    var prefix = column.addrPrefix;

    return ( data[ prefix + 'address1' ] ? data[ prefix + 'address1' ] : '' ) +
        ( data[ prefix + 'address2' ] ? ' ' + data[ prefix + 'address2' ] : '' ) +
        ( data[ prefix + 'address1' ] || data[ prefix + 'address1' ] ? ', ' : '' ) +
        ( data[ prefix + 'suburb' ] ? data[ prefix + 'suburb' ] : '' ) +
        ( data[ prefix + 'state' ] ? ' ' + data[ prefix + 'state' ] : '' ) +
        ( data[ prefix == 'post' ? 'postpcode' : 'homepostcode' ] ? ' ' + ( data[ prefix == 'post' ? 'postpcode' : 'homepostcode' ] ) : '' );
}

function selectFuncFormatter( row, cell, value, column, data )
{
    var vals = column.selectValues( { item: data } );
    if ( vals[ value ] )
        return vals[ value ];
    else
        return value;
}

function functionName(fun) {
    var ret = fun.toString();
    ret = ret.substr('function '.length);
    ret = ret.substr(0, ret.indexOf('('));
    return ret;
}

jQuery( function ( $ ) {
    /* Configure grid's columns */
    available_columns = {
        "nuwdbid": { id: "nuwdbid", name: "Member Number", field: "nuwdbid", sortable: true },
        "gender": { id: "gender", name: "Gender", field: "gender", editor: NUW.Editors.SelectEditor, selectValues: gender_values, width: 45, sortable: true },
        "name": { id: "name", name: "Name", sortable: true, validator: requiredFieldValidator, width: 200, field: 'name',
            formatter: function ( row, cell, value, column, data ) {
                if ( data.id == 'loading' )
                    return 'Loading...';
                return ( data.title != null ? data.title : '' ) + ' ' + data.firstname + ( data.firstname == data.preferredname ? '' : ' (' + data.preferredname + ')' ) + ' ' + data.lastname;
            },
            editor: NUW.Editors.NameEditor
        },
        "homeaddr": { id: 'homeaddr', name: 'Home Address', width: 200, field: 'homeaddr',
            formatter: addressFormatter, editor: NUW.Editors.AddressEditor, addrPrefix: 'home'
        },
        "postaddr": { id: 'postaddr', name: 'Post Address', width: 200, field: 'postaddr',
            formatter: addressFormatter, editor: NUW.Editors.AddressEditor, addrPrefix: 'post'
        },
        "postrts": { id: "postrts", name: "Post RTS", field: "postrts", sortable: true },
        "mobile": { id: "mobile", name: "Mobile Phone", field: "mobile", editor: Slick.Editors.Text, sortable: true },
        "home": { id: "home", name: "Home Phone", field: "home", editor: Slick.Editors.Text, sortable: true },
        "work": { id: "work", name: "Work Phone", field: "work", editor: Slick.Editors.Text, sortable: true },
        "fax": { id: "fax", name: "Fax", field: "fax", editor: Slick.Editors.Text, sortable: true },
        "email": { id: "email", name: "Email", field: "email", editor: Slick.Editors.Text, width: 200, sortable: true, validator: requiredFieldValidator },
        "dob": { id: "dob", name: "DOB", field: "dob", editor: Slick.Editors.Date, sortable: true },
        "status": { id: "status", name: "Financial Status", field: "status", editor: NUW.Editors.SelectEditor, selectValues: status_values, sortable: true },
        "activity": { id: "activity", name: "Activity Level", field: "activity", editor: NUW.Editors.SelectEditor, sortable: true,
            formatter: selectFuncFormatter,
            selectValues: function ( args ) {
                if ( args.item.type == 'Member' )
                {
                    return {
                        'supportive': 'Supportive',
                        'active': 'Active',
                        'apathetic': 'Apathetic',
                        'hostile': 'Hostile',
                        'not working': 'Not Working'
                    }
                }
                else
                {
                    return {
                        'non-union': 'Non-union',
                        'asked to join': 'Asked to join',
                        'has joined': 'Has joined',
                        'hostile': 'Hostile',
                        'not working': 'Not Working'
                    }
                }
            },
        },
        "employeeid": { id: "employeeid", name: "Employee ID", field: "employeeid", editor: Slick.Editors.Text, sortable: true },
        "employmenttype": { id: "employmenttype", name: "Employment Type", field: "employmenttype", editor: NUW.Editors.SelectEditor, sortable: true,
            formatter: selectFuncFormatter,
            selectValues: function ( args ) {
                if ( args.item.employmenttype == 'agency' )
                    return { 'agency': 'Agency' };
                else
                    return {
                        'casual': 'Causual',
                        'permanent': 'Permanent',
                        'part time': 'Part Time'
                    }
            }
        },
        "shift": { id: "shift", name: "Shift", field: "shift", editor: NUW.Editors.SelectEditor, sortable: true, selectValues: ['morning', 'afternoon', 'evening', 'day', 'night', 'rotating'] },
        "locationcode": { id: "locationcode", name: "Location Code", field: "locationcode", editor: Slick.Editors.Text, sortable: true },
        "agency": { id: "agency", name: "Agency", field: "agency", sortable: true },
        "socialgroup": { id: "socialgroup", name: "Social Group", field: "socialgroup", editor: Slick.Editors.Text },
        "languagemain": { id: "languagemain", name: "Main Language", field: "languagemain", editor: NUW.Editors.SelectEditor, sortable: true, selectValues: language_values },
        "languagetranslator": { id: "languagetranslator", name: "Can Translate", field: "languagetranslator", editor: NUW.Editors.SelectEditor, sortable: true, selectValues: language_values },
        "languageneed": { id: "languageneed", name: "Needs Translation", field: "languageneed", editor: NUW.Editors.SelectEditor, sortable: true, selectValues: language_values },
        "issues": { id: "issues", name: "Issues/Objections", field: "issues", editor: Slick.Editors.LongText, sortable: true }
    };
    for ( var i = 1; i <= 10; i++ )
    {
        available_columns[ "custom" + i ] = { id: "custom" + i, name: 'Custom ' + i, field: "custom" + i, editor: Slick.Editors.Text, sortable: true };
    }

    actions_column = { id: 'actions-column', name: '', width: 20,
        formatter: function ( row, cell, value, column, data ) {
            if ( data.id == 'loading' )
            {
                return '<img src="/++theme++nuwdelegates.theme/images/small-ajax-load.gif" />';
            }
        }
    };

    status_column = { id: 'status-column', name: '', width: 20,
        formatter: function ( row, cell, value, column, data ) {
            var status_class = 'nonmember', status_char = 'P', status_title = 'Potential Member';
            if ( $.inArray( 'financial-member', data.webstatuses ) !== -1 )
            {
                status_class = 'financial';
            }
            else if ( $.inArray( 'unfinancial-member', data.webstatuses ) !== -1 )
            {
                status_class = 'unfinancial';
            }

            if ( data.activity == 'not working' )
            {
                status_char = '-';
                status_title = 'Not working';
            }
            else if ( $.inArray( 'HSR', data.roles ) !== -1 && $.inArray( 'Delegate', data.roles ) !== -1 )
            {
                status_char = '+';
                status_title = 'HSR & Delegate';
            }
            else if ( $.inArray( 'Delegate', data.roles ) !== -1 )
            {
                status_char = 'D';
                status_title = 'Delegate';
            }
            else if ( $.inArray( 'HSR', data.roles ) !== -1 )
            {
                status_char = 'H';
                status_title = 'HSR';
            }
            else if ( data.activity == 'active' )
            {
                status_char = 'A';
                status_title = 'Active';
            }
            else if ( data.activity == 'hostile' )
            {
                status_char = 'X';
                status_title = 'Hostile';
            }
            else if ( $.inArray( 'financial-member', data.webstatuses ) !== -1 || $.inArray( 'unfinancial-member', data.webstatuses ) !== -1 )
            {
                status_char = 'M';
                status_title = 'Member';
            }

            return '<div class="status-' + status_class + '" title="' + status_title + '">' + status_char + '</div>';
        }
    };

    editable_column = { id: 'editable-column', name: '', width: 20,
        formatter: function ( row, cell, value, column, data ) {
            if($.inArray(row, enabled_columns) == -1) {
                return '<img src="/++theme++nuwdelegates.theme/images/pencil.svg" width="20" />';
            } else {
                return '<img src="/++theme++nuwdelegates.theme/images/lock.svg" width="20" />';
            }
        }
    };

    /* Setup the grid */
    loader = new NUW.Data.RemoteModel();
    grid = new Slick.Grid( "#grid", loader.data, [], {
        enableCellNavigation: true,
        enableColumnReorder: false,
        enableAsyncPostRender: true,
        asyncEditorLoading: true,
        editable: true,
        autoEdit: false,
        editCommandHandler: editCommandHandler
    } );

    grid.setSelectionModel(new Slick.RowSelectionModel());

    /* Wire up remote model to grid */
    grid.onViewportChanged.subscribe( function ( e, args ) {
        vp = grid.getRenderedRange();
        loader.setViewport( vp.top, vp.bottom );
        loader.reload();
    } );

    loader.onDataLoaded.subscribe( function ( e, args ) {
        for (var i = args.from; i <= args.to; i++) {
            grid.invalidateRow(i);
        }

        grid.updateRowCount();
        grid.render();
        $("#member-count").html(args.members + '/' + grid.getDataLength() + ' (' + (Math.round(((args.members/grid.getDataLength()) * 100) * 100) / 100) + '%)');
    } );

    grid.onSort.subscribe( function (e, args) {
        if ( args.sortCol.field )
        {
            sortdir = args.sortAsc ? 'asc' : 'desc';
            sortcol = args.sortCol.field;

            loader.clear();
            loader.setSortColumn( sortcol, sortdir );
            loader.reload();
        }
    } );

    /* Set the default sort column */
    grid.setSortColumn( 'name' );
    loader.setSortColumn( 'name', 'asc' );

    /* Page up/down handling */
    grid.onKeyDown.subscribe( function ( e, args ) {
        if ( e.keyCode == $.ui.keyCode.PAGE_UP || e.keyCode == $.ui.keyCode.PAGE_DOWN )
        {
            range = grid.getViewport();
            range_diff = range.bottom - range.top;

            if ( e.keyCode == $.ui.keyCode.PAGE_UP )
                new_row = args.row - range_diff;
            else
                new_row = args.row + range_diff;

            if ( new_row < 0 )
                new_row = 0;
            if ( new_row > grid.getDataLength() - 1 )
                new_row = grid.getDataLength() - 1;

            grid.gotoCell( new_row, args.cell );

            e.stopPropagation();
            e.preventDefault();
        }
    } );

    grid.onClick.subscribe( function ( e, args ) {
        // Get active row and cell
        activeCell = grid.getActiveCell();


        if (screen.width <= 1024) {
            // clicked edit toggle
            if (args.cell == 1) {
                var idx = $.inArray(args.row, enabled_columns);
                if (idx == -1) {
                    enabled_columns.push(args.row);
                } else {
                    enabled_columns.splice(idx, 1);
                }

                loader.clear();
                loader.reload();
                //grid.scrollRowToTop(args.row);
                //grid.setActiveCell(args.row, 2);
            }
        }

        // Check if the row isn't loaded
        if ( activeCell && loader.data[ activeCell.row ] === undefined )
        {
            currentView = grid.getViewport();
            // The row does not have any data and will thus cause an error
            // Do some hacky shit to get it deselected without user knowing...
            grid.scrollRowIntoView( activeCell.row );
            grid.resetActiveCell();
            grid.scrollRowIntoView( currentView.top );
        }
    } );

    grid.onBeforeEditCell.subscribe(function(e,args) {
        if (screen.width <= 1024) {
            var idx = $.inArray(args.row, enabled_columns);
            if (idx == -1 && args.cell != 1) {
                return false;
            }
        }
    });

    /* Load the default columns for the users worksite */
    loadColumns();

    /* Setup Add Member dialog */
    $addmemberdialog = $( '#add-member-dialog' ).dialog( {
        title: "Add Worker",
        autoOpen: false,
        width: 770,
        open: function () {
            /* Add the custom columns to the dialog */

            var $customcols = $( '#add-member-dialog' ).find( '.custom-information' );

            $customcols.html( '' );

            for ( colid in available_columns )
            {
                if ( colid.indexOf( 'custom' ) == 0 )
                {
                    col = available_columns[ colid ];

                    $customcols.append( '<div class="field">' +
                        '<label for="' + colid + '-field">' + col.name + '</label>' +
                        '<input id="' + colid + '-field" type="text" name="' + colid + '" />' +
                    '</div>' );
                }
            }

            $customcols.append( '<div class="visualClear"></div>' );
        }
    } );

    $addmemberdialog.find( 'form' ).submit( function ( e ) {
        e.preventDefault();

        $addmemberdialog.find( 'form .field' ).removeClass( 'invalid' );

        /* Validate the form */
        var invalid_fields = [],
            required_fields = [ 'firstname' ];

        var data = $addmemberdialog.find( 'form' ).serializeArray(), newdata = {};

        /* Convert data to object instead of array with name-value objects */
        for ( di in data )
        {
            d = data[ di ];
            newdata[ d.name ] = d.value;
        }
        data = newdata;
        delete newdata;

        /* Check that required fields are set */
        for ( ri in required_fields )
        {
            reqfield = required_fields[ri];

            if ( ! data[ reqfield ] )
            {
                invalid_fields.push( { name: reqfield, msg: 'This field is required' } );
            }
        }

        /* Display validation errors */
        for ( i in invalid_fields )
        {
            invfield = invalid_fields[i];
            $addmemberdialog.find( 'form input[name=' + invfield.name + ']' ).parent().addClass( 'invalid' );
        }

        if ( ! invalid_fields.length )
        {
            /* Everything is valid. Store the row */
            var new_row = loader.data.length;
            $addmemberdialog.find( 'form .field' ).removeClass( 'invalid' );

            if ( ! data[ 'preferredname' ] )
                data['preferredname'] = data['firstname'];

            // Post it to the API
            $.ajax( {
                url: 'portal_memberslistapi/add_member',
                type: 'POST',
                dataType: 'json',
                data: data,
                success: function ( data ) {
                    if ( data.status != 'ok' )
                    {
                        alert( "Unable to save new worker" );
                    }
                    else
                    {
                        $addmemberdialog.dialog( 'close' );
                        /* Reload the grid and scroll the new row into view */
                        loader.clear();
                        loader.reload();
                    }
                }
            } );
        }
    } );

    /* Setup Sort Columns dialog */
    $managedialog = $( '#manage-columns-dialog' ).dialog({
        title: "Manage Columns",
        autoOpen: false,
        width: 620,
        /* Filter the active and available lists on open */
        open: function() {
            jQuery.ajax({
                url: 'portal_memberslistapi/get_columns',
                dataType: 'json',
                success: function (data) {
                    // Update all custom names first
                    for (colid in data.custom_names) {
                        custom_name = data.custom_names[colid];
                        $('#column-' + colid).html(custom_name);
                        available_columns[colid].name = custom_name;
                    }

                    $('.cols-loading').hide();

                    for (colid in data.columns)
                    {
                        colname = data.columns[colid];

                        // Remove from current sortable list
                        $('#column-' + colname).remove();
                        // Add to active sortable list
                        $('#sortable3').append('<li id="column-' + colname + '" class="ui-state-default">' + available_columns[colname].name + '</li>');
                    }
                }
            });
        }
    }).submit(function (e) {
        e.preventDefault();
        var save_data = $("#sortable3").sortable('serialize');
        console.log(save_data);

        active_columns = [];

        $("#sortable3 > li").each(function(idx, elm){
            active_columns.push(available_columns[elm.id.split('-')[1]]);
        });


        jQuery.ajax({
            url: 'portal_memberslistapi/set_columns?' + save_data,
            type: 'POST',
            success: function (data) {
                loadColumns();
            }
        });

        $(this).dialog('close');
    });

    $('#sortable1, #sortable2, #sortable3').sortable({
        connectWith: ".connectedSortable",
        placeholder: "ui-state-highlight",
    }).disableSelection();

    $customizedialog = $( '#customize-columns-dialog' ).dialog({
        title: "Customize Columns",
        autoOpen: false,
        width: 620,
        open: function () {
            for (colid in available_columns)
            {
                if (colid.indexOf('custom') == 0) {
                    var col = available_columns[colid];
                    // Set the current custom name
                    $('#' + colid + '-input').val(col.name);
                    var editortype = functionName(col.editor);
                    // Set the current type
                    if (editortype == 'SelectEditor') {
                        $('#' + colid + '-type').val('select');
                        $('#' + colid + '-selection').prop('disabled', false);
                    }
                    if (editortype == 'TextEditor') {
                        $('#' + colid + '-type').val('text');
                        $('#' + colid + '-selection').prop('disabled', true);
                    }
                    if (editortype == 'LongTextEditor') {
                        $('#' + colid + '-type').val('note');
                        $('#' + colid + '-selection').prop('disabled', true);
                    }
                    // Set the current selection
                    if(col.selectValues) {
                        $('#' + colid + '-selection').val(col.selectValues.join('|'));
                    }
                }
            }
        }
    }).submit(function (e) {
        e.preventDefault();
        var save_data = $(this).find('form').serializeArray();

        jQuery.ajax({
            url: 'portal_memberslistapi/save_custom_columns',
            type: 'POST',
            dataType: 'json',
            data: save_data,
            success: function (data) {
                loadColumns();
                loader.clear();
                loader.reload();
            }
        });

        $(this).dialog('close');
    });

    $customizedialog.on("change", ".type-select", function(e) {
        var $values = $(this).parent().find('.select-values');

        if ($(this).val() == 'select') {
            $values.prop('disabled', false);
        }
        if ($(this).val() == 'text' || $(this).val() == 'note') {
            $values.prop('disabled', true);
        }
    });


    /* Wire up header actions */
    /* Manage Columns */
    $('#grid-header .settings-link').click( function ( e ) {
        e.preventDefault();

        $managedialog.dialog('open');
    });

    /* Customize columns */
    $('#grid-header .customcols-link').click( function ( e ) {
        e.preventDefault();

        $customizedialog.dialog('open');
    });

    /* Add Member */
    $( '#grid-header .add-link' ).click( function ( e ) {
        e.preventDefault();
        $addmemberdialog.find('form')[0].reset();
        $addmemberdialog.dialog( 'open' );
    } );

    /* Print the page */
    $( '#grid-header .print-link' ).click( function ( e ) {
        e.preventDefault();

        /* Create list of active column ids */
        var active_cols = grid.getColumns().slice( 1 ),
            active_ids = [];

        // Generate HTML for printing
        html =  '<html><head><style>\n'+
                'thead th { border-bottom: 1px solid black; font-size: 12px; padding: 0 10px; }\n'+
                'td { border-bottom: 1px solid black; padding: 3px 10px; }\n' +
                'body,td { font-family: sans; font-size: 12px; }\n'+
                '</style><title>Site List</title></head><body>' +
                '<table cellspacing="0"><thead>';

        for ( coli in active_cols )
        {
            col = active_cols[coli];
            active_ids.push( col.id );

            html += '<th>' + col.name + '</th>';

        }
        html += '</thead><tbody>';

        // Make loader load all it's data and use it to generat the html
        function printDataLoadHandler() {
            // Prevent it from being run again causing infinate loops...
            loader.onDataLoaded.unsubscribe( printDataLoadHandler );

            items = loader.data;

            for ( ii in items )
            {
                item = items[ ii ];

                html += '<tr>';

                for ( ai in active_ids )
                {
                    activeid = active_ids[ ai ];
                    var activeitem = item[ activeid ];
                    if (activeid in available_columns) {
                        if ('formatter' in available_columns[activeid]) {
                            activeitem = available_columns[activeid].formatter(null, null, null, available_columns[activeid], item) || activeitem;
                        }
                    }
                    html += '<td>' + ( activeitem ? activeitem : '&nbsp;' ) + '</td>'
                }
            }

            html += '</tbody></table></body></html>';

            print_win = window.open( 'about:blank', 'printwindow' );
            print_win.document.write( html );
            print_win.print();

            var row_count = loader.data.length;
            loader.clear();
            loader.data.length = row_count;
            grid.onViewportChanged.notify();
        }

        loader.onDataLoaded.subscribe( printDataLoadHandler );
        printDataLoadHandler();

        loader.setViewport( 0, loader.data.length );
        loader.reload();
    } );

    // Search field
    $("#grid-header .grid-search input").keyup( function (e) {
        // clear on Esc
        if (e.which == 27) {
          $( this ).val( "" );
        }

        loader.setFilter($(this).val(), $("#searchType").val());
        loader.clear();
        loader.reload();
    });



    // Trigger a window resize
    $( window ).resize();

    /* Trigger viewport change to get some data loaded */
    grid.onViewportChanged.notify();
} );
